require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::LinkedAccountsController do

  def mock_linked_account(stubs={})
    @mock_linked_account ||= mock_model(Admin::LinkedAccount, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all admin_linked_accounts as @admin_linked_accounts" do
      Admin::LinkedAccount.stub(:all) { [mock_linked_account] }
      get :index
      assigns(:admin_linked_accounts).should eq([mock_linked_account])
    end
  end

  describe "GET show" do
    it "assigns the requested linked_account as @linked_account" do
      Admin::LinkedAccount.stub(:find).with("37") { mock_linked_account }
      get :show, :id => "37"
      assigns(:linked_account).should be(mock_linked_account)
    end
  end

  describe "GET new" do
    it "assigns a new linked_account as @linked_account" do
      Admin::LinkedAccount.stub(:new) { mock_linked_account }
      get :new
      assigns(:linked_account).should be(mock_linked_account)
    end
  end

  describe "GET edit" do
    it "assigns the requested linked_account as @linked_account" do
      Admin::LinkedAccount.stub(:find).with("37") { mock_linked_account }
      get :edit, :id => "37"
      assigns(:linked_account).should be(mock_linked_account)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created linked_account as @linked_account" do
        Admin::LinkedAccount.stub(:new).with({'these' => 'params'}) { mock_linked_account(:save => true) }
        post :create, :linked_account => {'these' => 'params'}
        assigns(:linked_account).should be(mock_linked_account)
      end

      it "redirects to the created linked_account" do
        Admin::LinkedAccount.stub(:new) { mock_linked_account(:save => true) }
        post :create, :linked_account => {}
        response.should redirect_to(admin_linked_account_url(mock_linked_account))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved linked_account as @linked_account" do
        Admin::LinkedAccount.stub(:new).with({'these' => 'params'}) { mock_linked_account(:save => false) }
        post :create, :linked_account => {'these' => 'params'}
        assigns(:linked_account).should be(mock_linked_account)
      end

      it "re-renders the 'new' template" do
        Admin::LinkedAccount.stub(:new) { mock_linked_account(:save => false) }
        post :create, :linked_account => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested linked_account" do
        Admin::LinkedAccount.stub(:find).with("37") { mock_linked_account }
        mock_admin_linked_account.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :linked_account => {'these' => 'params'}
      end

      it "assigns the requested linked_account as @linked_account" do
        Admin::LinkedAccount.stub(:find) { mock_linked_account(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:linked_account).should be(mock_linked_account)
      end

      it "redirects to the linked_account" do
        Admin::LinkedAccount.stub(:find) { mock_linked_account(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(admin_linked_account_url(mock_linked_account))
      end
    end

    describe "with invalid params" do
      it "assigns the linked_account as @linked_account" do
        Admin::LinkedAccount.stub(:find) { mock_linked_account(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:linked_account).should be(mock_linked_account)
      end

      it "re-renders the 'edit' template" do
        Admin::LinkedAccount.stub(:find) { mock_linked_account(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested linked_account" do
      Admin::LinkedAccount.stub(:find).with("37") { mock_linked_account }
      mock_admin_linked_account.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the admin_linked_accounts list" do
      Admin::LinkedAccount.stub(:find) { mock_linked_account }
      delete :destroy, :id => "1"
      response.should redirect_to(admin_linked_accounts_url)
    end
  end

end
